name: Terraform GKE Operations with State Inspection

on:
  workflow_dispatch:
    inputs:
      terraform_action:
        description: 'Terraform Action'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy
          - show-state
          - list-resources
      project_id:
        description: 'GCP Project ID'
        required: true
        default: 'turnkey-guild-441104-f3'
      cluster_name:
        description: 'GKE Cluster Name'
        required: true
        default: 'my-gke-cluster'
      region:
        description: 'GCP Region'
        required: true
        default: 'us-central1'
      node_count:
        description: 'Number of nodes'
        required: true
        default: '2'
      machine_type:
        description: 'Machine type'
        required: true
        default: 'e2-medium'
      disk_size:
        description: 'Disk size in GB'
        required: true
        default: '100'

env:
  TF_VAR_project_id: ${{ github.event.inputs.project_id }}
  TF_VAR_cluster_name: ${{ github.event.inputs.cluster_name }}
  TF_VAR_region: ${{ github.event.inputs.region }}
  TF_VAR_node_count: ${{ github.event.inputs.node_count }}
  TF_VAR_machine_type: ${{ github.event.inputs.machine_type }}
  TF_VAR_disk_size: ${{ github.event.inputs.disk_size }}
  TF_VAR_service_account_email: "githubactions-sa@turnkey-guild-441104-f3.iam.gserviceaccount.com"

jobs:
  terraform:
    name: 'Terraform ${{ github.event.inputs.terraform_action }}'
    runs-on: ubuntu-latest
    
    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Verify Authentication and Project Access
      run: |
        echo "🔐 Verifying authentication..."
        gcloud auth list
        echo ""
        echo "📋 Checking project access for: ${{ github.event.inputs.project_id }}"
        gcloud projects describe ${{ github.event.inputs.project_id }} || {
          echo "❌ ERROR: Cannot access project ${{ github.event.inputs.project_id }}"
          echo "🔧 SOLUTION: Ensure the service account has the following roles on project ${{ github.event.inputs.project_id }}:"
          echo "   • Kubernetes Engine Admin (roles/container.admin)"
          echo "   • Compute Admin (roles/compute.admin)" 
          echo "   • Service Account User (roles/iam.serviceAccountUser)"
          echo "   • Project IAM Admin (if creating service accounts)"
          echo ""
          echo "📋 Run these commands in Google Cloud Console:"
          echo "gcloud projects add-iam-policy-binding ${{ github.event.inputs.project_id }} \\"
          echo "  --member='serviceAccount:githubactions-sa@turnkey-guild-441104-f3.iam.gserviceaccount.com' \\"
          echo "  --role='roles/container.admin'"
          echo ""
          echo "gcloud projects add-iam-policy-binding ${{ github.event.inputs.project_id }} \\"
          echo "  --member='serviceAccount:githubactions-sa@turnkey-guild-441104-f3.iam.gserviceaccount.com' \\"
          echo "  --role='roles/compute.admin'"
          echo ""
          echo "gcloud projects add-iam-policy-binding ${{ github.event.inputs.project_id }} \\"
          echo "  --member='serviceAccount:githubactions-sa@turnkey-guild-441104-f3.iam.gserviceaccount.com' \\"
          echo "  --role='roles/iam.serviceAccountUser'"
          exit 1
        }
        echo "✅ Project access verified"

    - name: Check Required APIs
      run: |
        echo "🔌 Checking required APIs..."
        gcloud services list --enabled --project=${{ github.event.inputs.project_id }} --filter="name:container.googleapis.com OR name:compute.googleapis.com" --format="value(name)" > enabled_apis.txt
        
        if ! grep -q "container.googleapis.com" enabled_apis.txt; then
          echo "❌ Kubernetes Engine API is not enabled"
          echo "🔧 Enable it with: gcloud services enable container.googleapis.com --project=${{ github.event.inputs.project_id }}"
          exit 1
        fi
        
        if ! grep -q "compute.googleapis.com" enabled_apis.txt; then
          echo "❌ Compute Engine API is not enabled"  
          echo "🔧 Enable it with: gcloud services enable compute.googleapis.com --project=${{ github.event.inputs.project_id }}"
          exit 1
        fi
        
        echo "✅ Required APIs are enabled"

    - name: Terraform Init
      id: init
      run: |
        echo "🚀 Initializing Terraform with remote state backend..."
        terraform init
        echo "✅ Terraform initialized successfully"
        echo "📦 Backend: GCS bucket terraform-statefile-bucket-tf2"
        echo "📁 State prefix: terraform/state/gke-cluster"

    - name: Terraform Validate
      id: validate
      run: |
        echo "✅ Validating Terraform configuration..."
        terraform validate -no-color
        echo "✅ Configuration is valid"

    # NEW: Show Current State File Contents with Detailed Resource Info
    - name: Show Current State File
      id: show_state
      if: github.event.inputs.terraform_action == 'show-state' || github.event.inputs.terraform_action == 'list-resources' || github.event.inputs.terraform_action == 'plan' || github.event.inputs.terraform_action == 'apply'
      run: |
        echo "📄 CURRENT TERRAFORM STATE FILE CONTENTS"
        echo "========================================"
        echo "📦 Backend: GCS bucket terraform-statefile-bucket-tf2"
        echo "📁 State file: terraform/state/gke-cluster/default.tfstate"
        echo ""
        
        # Check if state file exists
        if terraform state list > /dev/null 2>&1; then
          echo "✅ State file exists and contains resources"
          echo ""
          echo "📋 CURRENT RESOURCES IN STATE:"
          echo "------------------------------"
          terraform state list | while read resource; do
            echo "🔹 $resource"
          done
          echo ""
          
          echo "🔍 DETAILED RESOURCE INFORMATION:"
          echo "================================"
          
          # Show details for each resource individually with better error handling
          echo "🔍 Attempting to show detailed resource information..."
          resource_count=0
          terraform state list | while read resource; do
            resource_count=$((resource_count + 1))
            echo ""
            echo "📊 Resource $resource_count: $resource"
            echo "-------------------------------------------"
            
            # Method 1: Try terraform state show
            if terraform state show "$resource" 2>/dev/null; then
              echo "✅ Details retrieved successfully"
            else
              echo "⚠️ terraform state show failed, trying alternative methods..."
              
              # Method 2: Try terraform show with filtering
              if terraform show 2>/dev/null | grep -A 20 "$resource"; then
                echo "✅ Found resource in terraform show output"
              else
                echo "⚠️ Standard methods failed, trying JSON output..."
                
                # Method 3: JSON output with basic parsing
                terraform show -json 2>/dev/null | jq -r '.values.root_module.resources[]?' 2>/dev/null | head -10 || {
                  echo "❌ All methods failed for $resource"
                  echo "🔧 This could be due to:"
                  echo "   • Terraform state lock"
                  echo "   • Permission issues"
                  echo "   • Corrupted state file"
                  echo "   • Resource not fully initialized"
                }
              fi
            fi
            echo ""
          done
          
          echo "🗂️ STATE FILE METADATA:"
          echo "----------------------"
          terraform show -json 2>/dev/null | jq -r '{terraform_version: .terraform_version, serial: .serial, lineage: .lineage, format_version: .format_version}' 2>/dev/null || echo "⚠️ Unable to parse state metadata"
          
          echo ""
          echo "📈 RESOURCE COUNT SUMMARY:"
          echo "-------------------------"
          terraform state list | wc -l | xargs echo "Total Resources:"
          terraform state list | grep "google_container_cluster" | wc -l | xargs echo "GKE Clusters:"
          terraform state list | grep "google_container_node_pool" | wc -l | xargs echo "Node Pools:"
          terraform state list | grep "google_service_account" | wc -l | xargs echo "Service Accounts:"
          terraform state list | grep "google_project_iam" | wc -l | xargs echo "IAM Bindings:"
        else
          echo "📝 State file is empty or doesn't exist yet"
          echo "🔹 This is normal for new infrastructure"
        fi
      continue-on-error: true

    # NEW: List All Resources That Will Be Created/Modified
    - name: List Planned Resources
      id: list_resources
      if: github.event.inputs.terraform_action == 'list-resources' || github.event.inputs.terraform_action == 'plan' || github.event.inputs.terraform_action == 'apply'
      run: |
        echo ""
        echo "🏗️ RESOURCES THAT WILL BE CREATED/MODIFIED"
        echo "=========================================="
        
        # Generate plan and extract resource information
        terraform plan -no-color -input=false -out=resource-plan 2>&1 | tee plan-output.txt
        
        echo ""
        echo "📋 RESOURCE BREAKDOWN:"
        echo "---------------------"
        
        # Parse the plan output to show resources
        if grep -q "will be created" plan-output.txt; then
          echo "✅ RESOURCES TO BE CREATED:"
          grep "will be created" plan-output.txt | sed 's/^[[:space:]]*/🔹 /'
        fi
        
        if grep -q "will be updated" plan-output.txt; then
          echo ""
          echo "🔄 RESOURCES TO BE UPDATED:"
          grep "will be updated" plan-output.txt | sed 's/^[[:space:]]*/🔹 /'
        fi
        
        if grep -q "will be destroyed" plan-output.txt; then
          echo ""
          echo "🗑️ RESOURCES TO BE DESTROYED:"
          grep "will be destroyed" plan-output.txt | sed 's/^[[:space:]]*/🔹 /'
        fi
        
        echo ""
        echo "📊 PLAN SUMMARY:"
        echo "---------------"
        grep -E "Plan:|No changes" plan-output.txt || echo "⚠️ Unable to parse plan summary"
        
        # Show resource details with terraform show
        echo ""
        echo "🔍 DETAILED RESOURCE CONFIGURATION:"
        echo "----------------------------------"
        terraform show resource-plan 2>/dev/null | head -100 || echo "⚠️ Unable to show detailed plan"
      continue-on-error: true

    # NEW: Inspect Remote State Backend with Direct GCS Access
    - name: Inspect Remote State Backend
      id: inspect_backend
      if: github.event.inputs.terraform_action == 'show-state' || github.event.inputs.terraform_action == 'list-resources'
      run: |
        echo ""
        echo "🗄️ REMOTE STATE BACKEND INFORMATION"
        echo "==================================="
        echo "📦 Backend Type: Google Cloud Storage"
        echo "🪣 Bucket: terraform-statefile-bucket-tf2"
        echo "📁 Prefix: terraform/state/gke-cluster"
        echo "🌍 Project: ${{ github.event.inputs.project_id }}"
        echo "🔗 Direct URL: https://storage.cloud.google.com/terraform-statefile-bucket-tf2/terraform/state/gke-cluster/default.tfstate"
        echo ""
        
        echo "🔍 Testing direct GCS access..."
        gsutil ls -la gs://terraform-statefile-bucket-tf2/terraform/state/gke-cluster/ 2>/dev/null || {
          echo "⚠️ Unable to list bucket contents"
          echo "🔧 Ensure the service account has Storage Object Viewer role"
        }
        
        echo ""
        echo "📥 Attempting to download state file directly..."
        if gsutil cp gs://terraform-statefile-bucket-tf2/terraform/state/gke-cluster/default.tfstate ./temp-state.tfstate 2>/dev/null; then
          echo "✅ Successfully downloaded state file"
          echo "📊 State file size: $(wc -c < ./temp-state.tfstate) bytes"
          echo "🔍 State file preview (first 500 chars):"
          head -c 500 ./temp-state.tfstate
          echo ""
          echo "..."
        else
          echo "❌ Failed to download state file"
          echo "🔧 Check service account permissions for:"
          echo "   • roles/storage.objectViewer"
          echo "   • roles/storage.admin (if needed)"
        fi
        
        echo ""
        echo "🔧 Service Account Permissions Check:"
        echo "gcloud projects get-iam-policy ${{ github.event.inputs.project_id }} --flatten='bindings[].members' --filter='bindings.members:githubactions-sa@turnkey-guild-441104-f3.iam.gserviceaccount.com'"
        
        echo ""
        echo "📋 Backend Configuration:"
        echo "bucket  = \"terraform-statefile-bucket-tf2\""
        echo "prefix  = \"terraform/state/gke-cluster\""
        echo "project = \"${{ github.event.inputs.project_id }}\""
      continue-on-error: true

    # PLAN OPERATION (Enhanced)
    - name: Terraform Plan
      id: plan
      if: github.event.inputs.terraform_action == 'plan' || github.event.inputs.terraform_action == 'apply'
      run: |
        echo "📋 Creating Terraform plan..."
        terraform plan -no-color -input=false -out=tfplan
        echo "✅ Plan created successfully"
        echo ""
        echo "📊 PLAN SUMMARY:"
        echo "==============="
        echo "🎯 Target: GKE cluster '${{ github.event.inputs.cluster_name }}'"
        echo "📍 Region: ${{ github.event.inputs.region }}"
        echo "🌐 Zones: ${{ github.event.inputs.region }}-a, ${{ github.event.inputs.region }}-c"
        echo "🖥️ Machine Type: ${{ github.event.inputs.machine_type }}"
        echo "💾 Disk Type: pd-standard (avoids SSD quota issues)"
        echo "💿 Disk Size: ${{ github.event.inputs.disk_size }}GB"
        echo "🔐 Service Account: githubactions-sa@turnkey-guild-441104-f3.iam.gserviceaccount.com"
        echo "🗑️ Deletion Protection: disabled"
        echo "📊 Node Count: ${{ github.event.inputs.node_count }}"
        echo ""
        
        echo "🏗️ EXPECTED RESOURCES TO BE CREATED:"
        echo "-----------------------------------"
        echo "🔹 google_container_cluster.${{ github.event.inputs.cluster_name }}"
        echo "🔹 google_container_node_pool.primary_nodes"
        echo "🔹 google_service_account.gke_node_service_account (if not exists)"
        echo "🔹 google_project_iam_member.gke_node_service_account_* (IAM bindings)"
        echo "🔹 Associated networking resources (if creating new VPC)"
        echo ""
        
        # Show detailed plan
        terraform show tfplan
      continue-on-error: false

    # APPLY OPERATION (Enhanced with Detailed Resource Info)
    - name: Terraform Apply
      id: apply
      if: github.event.inputs.terraform_action == 'apply'
      run: |
        echo "🚀 Applying Terraform configuration..."
        terraform apply -auto-approve -input=false tfplan
        echo "✅ Apply completed successfully"
        echo ""
        echo "🎉 INFRASTRUCTURE CREATED:"
        echo "========================="
        echo "✅ GKE cluster '${{ github.event.inputs.cluster_name }}' is now running"
        echo "📍 Location: ${{ github.event.inputs.region }}"
        echo "🌐 Zones: ${{ github.event.inputs.region }}-a, ${{ github.event.inputs.region }}-c"
        echo "🔐 Service Account: githubactions-sa@turnkey-guild-441104-f3.iam.gserviceaccount.com"
        echo "📊 Nodes: ${{ github.event.inputs.node_count }} (fixed count)"
        echo "💾 State stored in: terraform-statefile-bucket-tf2/terraform/state/gke-cluster"
        echo ""
        
        echo "🔍 DETAILED RESOURCES CREATED:"
        echo "=============================="
        terraform state list | while read resource; do
          echo ""
          echo "📊 Resource: $resource"
          echo "-------------------------------------------"
          terraform state show "$resource" | head -50  # Show first 50 lines to avoid too much output
          echo "... (truncated for readability)"
          echo ""
        done
        
        echo "📋 CLUSTER DETAILS:"
        echo "==================="
        gcloud container clusters describe ${{ github.event.inputs.cluster_name }} \
          --region ${{ github.event.inputs.region }} \
          --project ${{ github.event.inputs.project_id }} \
          --format="table(name,status,currentNodeCount,endpoint,masterVersion)" 2>/dev/null || echo "⚠️ Unable to get cluster details"
        
        echo ""
        echo "🌐 NODE POOL DETAILS:"
        echo "===================="
        gcloud container node-pools list \
          --cluster=${{ github.event.inputs.cluster_name }} \
          --region=${{ github.event.inputs.region }} \
          --project=${{ github.event.inputs.project_id }} \
          --format="table(name,status,machineType,diskSizeGb,nodeCount)" 2>/dev/null || echo "⚠️ Unable to get node pool details"
        
        echo ""
        echo "🔐 SERVICE ACCOUNT DETAILS:"
        echo "=========================="
        terraform state list | grep google_service_account | while read sa_resource; do
          echo "Service Account: $sa_resource"
          terraform state show "$sa_resource" | grep -E "(email|unique_id|display_name)" || echo "⚠️ No service account details"
        done

    # DESTROY OPERATIONS (Enhanced)
    - name: Terraform Destroy Plan
      id: destroy_plan
      if: github.event.inputs.terraform_action == 'destroy'
      run: |
        echo "🗑️ Creating destruction plan..."
        
        # First show what will be destroyed
        echo "📋 CURRENT RESOURCES THAT WILL BE DESTROYED:"
        echo "-------------------------------------------"
        terraform state list | while read resource; do
          echo "🔹 $resource"
        done
        echo ""
        
        terraform plan -destroy -no-color -input=false -out=destroy-plan
        echo "✅ Destroy plan created successfully"
        echo ""
        echo "⚠️ DESTRUCTION SUMMARY:"
        echo "======================"
        echo "🗑️ Will destroy: GKE cluster '${{ github.event.inputs.cluster_name }}'"
        echo "📍 Region: ${{ github.event.inputs.region }}"
        echo "🌐 Zones: ${{ github.event.inputs.region }}-a, ${{ github.event.inputs.region }}-c"
        echo "💾 State will be updated in: terraform-statefile-bucket-tf2"
        echo "⚠️ This action cannot be undone!"
        
        # Show detailed destroy plan
        terraform show destroy-plan
      continue-on-error: false

    - name: Terraform Destroy
      id: destroy
      if: github.event.inputs.terraform_action == 'destroy'
      run: |
        echo "🗑️ Destroying infrastructure..."
        terraform apply -auto-approve -input=false destroy-plan
        echo "✅ Destroy completed successfully"
        echo ""
        echo "🗑️ INFRASTRUCTURE DESTROYED:"
        echo "==========================="
        echo "✅ GKE cluster '${{ github.event.inputs.cluster_name }}' has been removed"
        echo "✅ All node pools and associated resources cleaned up"
        echo "✅ Zones ${{ github.event.inputs.region }}-a, ${{ github.event.inputs.region }}-c are now clean"
        echo "💾 Remote state updated in: terraform-statefile-bucket-tf2"
        echo "💰 All resources have been cleaned up to avoid charges"
        echo ""
        
        echo "📋 STATE AFTER DESTROY:"
        echo "----------------------"
        terraform state list || echo "✅ State is now empty"

    # NEW: Final State Summary with Detailed Resource Info
    - name: Final State Summary
      if: always()
      run: |
        echo ""
        echo "📊 FINAL TERRAFORM STATE SUMMARY"
        echo "==============================="
        echo "🎯 Action: ${{ github.event.inputs.terraform_action }}"
        echo "📍 Project: ${{ github.event.inputs.project_id }}"
        echo "🏷️ Cluster: ${{ github.event.inputs.cluster_name }}"
        echo "🌍 Region: ${{ github.event.inputs.region }}"
        echo "🗄️ Backend: GCS (terraform-statefile-bucket-tf2)"
        echo ""
        
        echo "📋 CURRENT RESOURCES IN STATE:"
        echo "-----------------------------"
        if terraform state list > /dev/null 2>&1; then
          terraform state list | while read resource; do
            echo "🔹 $resource"
          done
          echo ""
          
          echo "📈 RESOURCE SUMMARY:"
          echo "-------------------"
          total_resources=$(terraform state list | wc -l)
          gke_clusters=$(terraform state list | grep "google_container_cluster" | wc -l)
          node_pools=$(terraform state list | grep "google_container_node_pool" | wc -l)
          service_accounts=$(terraform state list | grep "google_service_account" | wc -l)
          iam_bindings=$(terraform state list | grep "google_project_iam" | wc -l)
          
          echo "📊 Total Resources: $total_resources"
          echo "🏗️ GKE Clusters: $gke_clusters"
          echo "🔗 Node Pools: $node_pools" 
          echo "🔐 Service Accounts: $service_accounts"
          echo "👥 IAM Bindings: $iam_bindings"
          echo ""
          
          if [ "$gke_clusters" -gt 0 ]; then
            echo "🌐 CLUSTER CONNECTION INFO:"
            echo "--------------------------"
            echo "🔗 Connect command:"
            echo "gcloud container clusters get-credentials ${{ github.event.inputs.cluster_name }} --region ${{ github.event.inputs.region }} --project ${{ github.event.inputs.project_id }}"
            echo ""
            echo "📋 Verify connection:"
            echo "kubectl get nodes"
            echo "kubectl get pods --all-namespaces"
          fi
        else
          echo "📝 No resources in state (empty state)"
        fi
        echo ""
        
        echo "🔗 Useful Commands:"
        echo "-----------------"
        echo "📋 View state: terraform state list"
        echo "🔍 Show resource: terraform state show <resource_name>"
        echo "📄 Show plan: terraform plan"
        echo "🚀 Apply changes: terraform apply"
        echo "🗑️ Destroy all: terraform destroy"
        echo ""
        echo "🔗 Workflow URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
