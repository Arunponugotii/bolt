name: Deploy GKE Infrastructure

on:
  workflow_dispatch:
    inputs:
      terraform_action:
        description: 'Terraform Action'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy
      project_id:
        description: 'GCP Project ID'
        required: true
        default: 'turnkey-guild-441104-f3'
      cluster_name:
        description: 'GKE Cluster Name'
        required: true
        default: 'my-gke-cluster'
      region:
        description: 'GCP Region'
        required: true
        default: 'us-central1'
      node_count:
        description: 'Number of nodes'
        required: true
        default: '3'
      machine_type:
        description: 'Machine type'
        required: true
        default: 'e2-medium'
      disk_size:
        description: 'Disk size in GB'
        required: true
        default: '100'
      enable_autoscaling:
        description: 'Enable autoscaling'
        required: true
        default: 'false'
        type: boolean
      min_nodes:
        description: 'Minimum nodes (if autoscaling)'
        required: true
        default: '1'
      max_nodes:
        description: 'Maximum nodes (if autoscaling)'
        required: true
        default: '5'

env:
  TF_VAR_project_id: ${{ github.event.inputs.project_id }}
  TF_VAR_cluster_name: ${{ github.event.inputs.cluster_name }}
  TF_VAR_region: ${{ github.event.inputs.region }}
  TF_VAR_node_count: ${{ github.event.inputs.node_count }}
  TF_VAR_machine_type: ${{ github.event.inputs.machine_type }}
  TF_VAR_disk_size: ${{ github.event.inputs.disk_size }}
  TF_VAR_enable_autoscaling: ${{ github.event.inputs.enable_autoscaling }}
  TF_VAR_min_nodes: ${{ github.event.inputs.min_nodes }}
  TF_VAR_max_nodes: ${{ github.event.inputs.max_nodes }}
  TF_VAR_service_account_email: "githubactions-sa@turnkey-guild-441104-f3.iam.gserviceaccount.com"

jobs:
  terraform:
    name: 'Terraform ${{ github.event.inputs.terraform_action }}'
    runs-on: ubuntu-latest
    
    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Verify Service Account Access
      run: |
        echo "Verifying service account access..."
        gcloud auth list
        gcloud config list project
        echo "Checking if custom service account exists..."
        gcloud iam service-accounts describe githubactions-sa@turnkey-guild-441104-f3.iam.gserviceaccount.com --project=turnkey-guild-441104-f3 || echo "Service account not found in turnkey-guild-441104-f3, checking in ${{ github.event.inputs.project_id }}..."
        gcloud iam service-accounts describe githubactions-sa@${{ github.event.inputs.project_id }}.iam.gserviceaccount.com --project=${{ github.event.inputs.project_id }} || echo "Service account verification failed"

    - name: Terraform Format
      id: fmt
      run: terraform fmt -check
      continue-on-error: true

    - name: Terraform Init
      id: init
      run: terraform init

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    - name: Terraform Plan
      id: plan
      if: github.event.inputs.terraform_action == 'plan' || github.event.inputs.terraform_action == 'apply'
      run: |
        terraform plan -no-color -input=false -out=tfplan
        echo "Plan completed successfully"
      continue-on-error: false

    - name: Terraform Apply
      id: apply
      if: github.event.inputs.terraform_action == 'apply'
      run: |
        terraform apply -auto-approve -input=false tfplan
        echo "Apply completed successfully"

    - name: Terraform Destroy Plan
      id: destroy_plan
      if: github.event.inputs.terraform_action == 'destroy'
      run: |
        terraform plan -destroy -no-color -input=false -out=destroy-plan
        echo "Destroy plan completed successfully"
      continue-on-error: false

    - name: Terraform Destroy
      id: destroy
      if: github.event.inputs.terraform_action == 'destroy'
      run: |
        terraform apply -auto-approve -input=false destroy-plan
        echo "Destroy completed successfully"

    - name: Output Results
      if: always()
      run: |
        echo "Terraform ${{ github.event.inputs.terraform_action }} operation completed"
        if [ "${{ github.event.inputs.terraform_action }}" = "apply" ] && [ "${{ steps.apply.outcome }}" = "success" ]; then
          echo "GKE cluster '${{ github.event.inputs.cluster_name }}' has been created successfully!"
          echo "Region: ${{ github.event.inputs.region }}"
          echo "Project: ${{ github.event.inputs.project_id }}"
          echo "Service Account: githubactions-sa@turnkey-guild-441104-f3.iam.gserviceaccount.com"
        elif [ "${{ github.event.inputs.terraform_action }}" = "destroy" ] && [ "${{ steps.destroy.outcome }}" = "success" ]; then
          echo "GKE cluster '${{ github.event.inputs.cluster_name }}' has been destroyed successfully!"
          echo "All resources have been cleaned up."
        elif [ "${{ github.event.inputs.terraform_action }}" = "plan" ] && [ "${{ steps.plan.outcome }}" = "success" ]; then
          echo "Terraform plan completed successfully!"
          echo "Review the plan output above to see what changes will be made."
        fi