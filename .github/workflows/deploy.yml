name: Terraform GKE Operations

on:
  workflow_dispatch:
    inputs:
      terraform_action:
        description: 'Terraform Action'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy
      project_id:
        description: 'GCP Project ID'
        required: true
        default: '	turnkey-guild-441104-f3'
      cluster_name:
        description: 'GKE Cluster Name'
        required: true
        default: 'my-gke-cluster'
      region:
        description: 'GCP Region'
        required: true
        default: 'us-central1'
      node_count:
        description: 'Number of nodes'
        required: true
        default: '3'
      machine_type:
        description: 'Machine type'
        required: true
        default: 'e2-medium'
      disk_size:
        description: 'Disk size in GB'
        required: true
        default: '100'
      enable_autoscaling:
        description: 'Enable autoscaling'
        required: true
        default: 'false'
        type: boolean
      min_nodes:
        description: 'Minimum nodes (if autoscaling)'
        required: true
        default: '1'
      max_nodes:
        description: 'Maximum nodes (if autoscaling)'
        required: true
        default: '5'

env:
  TF_VAR_project_id: ${{ github.event.inputs.project_id }}
  TF_VAR_cluster_name: ${{ github.event.inputs.cluster_name }}
  TF_VAR_region: ${{ github.event.inputs.region }}
  TF_VAR_node_count: ${{ github.event.inputs.node_count }}
  TF_VAR_machine_type: ${{ github.event.inputs.machine_type }}
  TF_VAR_disk_size: ${{ github.event.inputs.disk_size }}
  TF_VAR_enable_autoscaling: ${{ github.event.inputs.enable_autoscaling }}
  TF_VAR_min_nodes: ${{ github.event.inputs.min_nodes }}
  TF_VAR_max_nodes: ${{ github.event.inputs.max_nodes }}
  TF_VAR_service_account_email: "githubactions-sa@turnkey-guild-441104-f3.iam.gserviceaccount.com"

jobs:
  terraform:
    name: 'Terraform ${{ github.event.inputs.terraform_action }}'
    runs-on: ubuntu-latest
    
    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Verify Service Account and Project Access
      run: |
        echo "🔐 Verifying authentication and access..."
        gcloud auth list
        gcloud config list project
        echo "📋 Checking project access for: ${{ github.event.inputs.project_id }}"
        gcloud projects describe ${{ github.event.inputs.project_id }} || echo "⚠️ Project access verification failed"
        echo "🔧 Checking service account: githubactions-sa@turnkey-guild-441104-f3.iam.gserviceaccount.com"
        gcloud iam service-accounts describe githubactions-sa@turnkey-guild-441104-f3.iam.gserviceaccount.com --project=turnkey-guild-441104-f3 || echo "⚠️ Service account verification failed"

    - name: Check Regional Quotas and Resources
      run: |
        echo "📊 Checking regional quotas for ${{ github.event.inputs.region }}..."
        gcloud compute regions describe ${{ github.event.inputs.region }} --project=${{ github.event.inputs.project_id }} || echo "⚠️ Region check failed"
        echo "💾 Checking disk quotas (using pd-standard to avoid SSD quota issues)..."
        gcloud compute project-info describe --project=${{ github.event.inputs.project_id }} --format="table(quotas.metric,quotas.limit,quotas.usage)" | grep -E "(SSD|PERSISTENT_DISK)" || echo "✅ Quota check completed"
        echo "🌐 Target zones: ${{ github.event.inputs.region }}-a, ${{ github.event.inputs.region }}-c"

    - name: Terraform Format Check
      id: fmt
      run: |
        echo "🎨 Checking Terraform formatting..."
        terraform fmt -check
      continue-on-error: true

    - name: Terraform Init
      id: init
      run: |
        echo "🚀 Initializing Terraform with remote state backend..."
        terraform init
        echo "✅ Terraform initialized successfully"
        echo "📦 Backend: GCS bucket terraform-statefile-bucket-tf2"
        echo "📁 State prefix: terraform/state/gke-cluster"

    - name: Terraform Validate
      id: validate
      run: |
        echo "✅ Validating Terraform configuration..."
        terraform validate -no-color
        echo "✅ Configuration is valid"

    # PLAN OPERATION
    - name: Terraform Plan
      id: plan
      if: github.event.inputs.terraform_action == 'plan' || github.event.inputs.terraform_action == 'apply'
      run: |
        echo "📋 Creating Terraform plan..."
        terraform plan -no-color -input=false -out=tfplan
        echo "✅ Plan created successfully"
        echo ""
        echo "📊 PLAN SUMMARY:"
        echo "🎯 Target: GKE cluster '${{ github.event.inputs.cluster_name }}'"
        echo "📍 Region: ${{ github.event.inputs.region }}"
        echo "🌐 Zones: ${{ github.event.inputs.region }}-a, ${{ github.event.inputs.region }}-c"
        echo "🖥️ Machine Type: ${{ github.event.inputs.machine_type }}"
        echo "💾 Disk Type: pd-standard (avoids SSD quota issues)"
        echo "🔐 Service Account: githubactions-sa@turnkey-guild-441104-f3.iam.gserviceaccount.com"
        echo "🗑️ Deletion Protection: disabled"
        if [ "${{ github.event.inputs.enable_autoscaling }}" = "true" ]; then
          echo "📈 Autoscaling: ${{ github.event.inputs.min_nodes }}-${{ github.event.inputs.max_nodes }} nodes"
        else
          echo "📊 Fixed Nodes: ${{ github.event.inputs.node_count }}"
        fi
      continue-on-error: false

    # APPLY OPERATION
    - name: Terraform Apply
      id: apply
      if: github.event.inputs.terraform_action == 'apply'
      run: |
        echo "🚀 Applying Terraform configuration..."
        terraform apply -auto-approve -input=false tfplan
        echo "✅ Apply completed successfully"
        echo ""
        echo "🎉 INFRASTRUCTURE CREATED:"
        echo "✅ GKE cluster '${{ github.event.inputs.cluster_name }}' is now running"
        echo "📍 Location: ${{ github.event.inputs.region }}"
        echo "🌐 Zones: ${{ github.event.inputs.region }}-a, ${{ github.event.inputs.region }}-c"
        echo "💾 State stored in: terraform-statefile-bucket-tf2/terraform/state/gke-cluster"

    # DESTROY OPERATIONS
    - name: Terraform Destroy Plan
      id: destroy_plan
      if: github.event.inputs.terraform_action == 'destroy'
      run: |
        echo "🗑️ Creating destruction plan..."
        terraform plan -destroy -no-color -input=false -out=destroy-plan
        echo "✅ Destroy plan created successfully"
        echo ""
        echo "⚠️ DESTRUCTION PLAN SUMMARY:"
        echo "🗑️ Will destroy: GKE cluster '${{ github.event.inputs.cluster_name }}'"
        echo "📍 Region: ${{ github.event.inputs.region }}"
        echo "🌐 Zones: ${{ github.event.inputs.region }}-a, ${{ github.event.inputs.region }}-c"
        echo "💾 State will be updated in: terraform-statefile-bucket-tf2"
        echo "⚠️ This action cannot be undone!"
      continue-on-error: false

    - name: Terraform Destroy
      id: destroy
      if: github.event.inputs.terraform_action == 'destroy'
      run: |
        echo "🗑️ Destroying infrastructure..."
        terraform apply -auto-approve -input=false destroy-plan
        echo "✅ Destroy completed successfully"
        echo ""
        echo "🗑️ INFRASTRUCTURE DESTROYED:"
        echo "✅ GKE cluster '${{ github.event.inputs.cluster_name }}' has been removed"
        echo "✅ All node pools and associated resources cleaned up"
        echo "✅ Zones ${{ github.event.inputs.region }}-a, ${{ github.event.inputs.region }}-c are now clean"
        echo "💾 Remote state updated in: terraform-statefile-bucket-tf2"
        echo "💰 All resources have been cleaned up to avoid charges"

    # FINAL SUMMARY
    - name: Operation Summary
      if: always()
      run: |
        echo ""
        echo "📊 TERRAFORM OPERATION SUMMARY"
        echo "================================"
        echo "🎯 Action: ${{ github.event.inputs.terraform_action }}"
        echo "📍 Project: ${{ github.event.inputs.project_id }}"
        echo "🏷️ Cluster: ${{ github.event.inputs.cluster_name }}"
        echo "🌍 Region: ${{ github.event.inputs.region }}"
        echo "💾 Backend: GCS (terraform-statefile-bucket-tf2)"
        echo "🔐 Service Account: githubactions-sa@turnkey-guild-441104-f3.iam.gserviceaccount.com"
        echo ""
        
        if [ "${{ github.event.inputs.terraform_action }}" = "apply" ] && [ "${{ steps.apply.outcome }}" = "success" ]; then
          echo "🎉 SUCCESS: Infrastructure has been created!"
          echo "🔧 Next step: Configure kubectl to connect to your cluster"
          echo "📋 Command: gcloud container clusters get-credentials ${{ github.event.inputs.cluster_name }} --region ${{ github.event.inputs.region }} --project ${{ github.event.inputs.project_id }}"
        elif [ "${{ github.event.inputs.terraform_action }}" = "destroy" ] && [ "${{ steps.destroy.outcome }}" = "success" ]; then
          echo "🗑️ SUCCESS: Infrastructure has been destroyed!"
          echo "💰 All resources cleaned up to avoid charges"
          echo "🔄 You can now create new infrastructure with different configuration"
        elif [ "${{ github.event.inputs.terraform_action }}" = "plan" ] && [ "${{ steps.plan.outcome }}" = "success" ]; then
          echo "📋 SUCCESS: Plan has been generated!"
          echo "👀 Review the plan output above"
          echo "🚀 If everything looks good, run 'apply' to create the infrastructure"
        else
          echo "❌ Operation completed with issues - check the logs above"
        fi
        
        echo ""
        echo "🔗 Workflow URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"